ddlog_lsp_macros::node_kind_ids! {
    language: "ddlog.dl",
    node_kinds: [
        (ROOT, "ROOT", true),
        (ANNOTATED_ITEM, "annotated_item", true),
        (APPLY, "apply", true),
        (ARG, "arg", true),
        (ARG_OPT_TYPE, "arg_opt_type", true),
        (ARG_TRANS, "arg_trans", true),
        (ATOM, "atom", true),
        (ATOM_ELEM, "atom_elem", true),
        (ATOM_POS, "atom_pos", true),
        (ATOM_REC, "atom_rec", true),
        (ATTRIBUTE, "attribute", true),
        (ATTRIBUTES, "attributes", true),
        (COMMENT_BLOCK, "comment_block", true),
        (COMMENT_BLOCK_INNER, "comment_block_inner", true),
        (COMMENT_LINE, "comment_line", true),
        (CONS, "cons", true),
        (CONS_POS, "cons_pos", true),
        (CONS_REC, "cons_rec", true),
        (ESCAPE_SEQUENCE, "escape_sequence", true),
        (ESCAPE_SEQUENCE_INTERPOLATED, "escape_sequence_interpolated", true),
        (EXP, "exp", true),
        (EXP_ADD, "exp_add", true),
        (EXP_ASSIGN, "exp_assign", true),
        (EXP_BINDING, "exp_binding", true),
        (EXP_BIT_AND, "exp_bit_and", true),
        (EXP_BIT_NEG, "exp_bit_neg", true),
        (EXP_BIT_OR, "exp_bit_or", true),
        (EXP_BIT_SLICE, "exp_bit_slice", true),
        (EXP_BIT_XOR, "exp_bit_xor", true),
        (EXP_BLOCK, "exp_block", true),
        (EXP_BREAK, "exp_break", true),
        (EXP_CAST, "exp_cast", true),
        (EXP_CAT, "exp_cat", true),
        (EXP_COND, "exp_cond", true),
        (EXP_CONS_POS, "exp_cons_pos", true),
        (EXP_CONS_REC, "exp_cons_rec", true),
        (EXP_CONTINUE, "exp_continue", true),
        (EXP_DECL_VAR, "exp_decl_var", true),
        (EXP_DIV, "exp_div", true),
        (EXP_EQ, "exp_eq", true),
        (EXP_FIELD, "exp_field", true),
        (EXP_FOR, "exp_for", true),
        (EXP_FUN_CALL, "exp_fun_call", true),
        (EXP_FUN_CALL_DOT, "exp_fun_call_dot", true),
        (EXP_GT, "exp_gt", true),
        (EXP_GTEQ, "exp_gteq", true),
        (EXP_LAMBDA, "exp_lambda", true),
        (EXP_LAMBDA_BRANCH_0, "exp_lambda_branch_0", true),
        (EXP_LAMBDA_BRANCH_1, "exp_lambda_branch_1", true),
        (EXP_LIT, "exp_lit", true),
        (EXP_LOG_AND, "exp_log_and", true),
        (EXP_LOG_IMP, "exp_log_imp", true),
        (EXP_LOG_NEG, "exp_log_neg", true),
        (EXP_LOG_OR, "exp_log_or", true),
        (EXP_LT, "exp_lt", true),
        (EXP_LTEQ, "exp_lteq", true),
        (EXP_MATCH, "exp_match", true),
        (EXP_MUL, "exp_mul", true),
        (EXP_NEG, "exp_neg", true),
        (EXP_NEQ, "exp_neq", true),
        (EXP_PROJ, "exp_proj", true),
        (EXP_PROJ_DIGITS, "exp_proj_digits", true),
        (EXP_REF, "exp_ref", true),
        (EXP_REM, "exp_rem", true),
        (EXP_RETURN, "exp_return", true),
        (EXP_SEQ, "exp_seq", true),
        (EXP_SHL, "exp_shl", true),
        (EXP_SHR, "exp_shr", true),
        (EXP_SLICE, "exp_slice", true),
        (EXP_SUB, "exp_sub", true),
        (EXP_TRY, "exp_try", true),
        (EXP_TUPLE, "exp_tuple", true),
        (EXP_TYPE, "exp_type", true),
        (EXP_WILD, "exp_wild", true),
        (FIELD, "field", true),
        (FUNCTION, "function", true),
        (FUNCTION_EXTERN, "function_extern", true),
        (FUNCTION_NORMAL, "function_normal", true),
        (FUNCTION_NORMAL_BRANCH_0, "function_normal_branch_0", true),
        (FUNCTION_NORMAL_BRANCH_1, "function_normal_branch_1", true),
        (IDENT, "ident", true),
        (IDENT_LOWER, "ident_lower", true),
        (IDENT_LOWER_SCOPED, "ident_lower_scoped", true),
        (IDENT_SCOPED, "ident_scoped", true),
        (IDENT_UPPER, "ident_upper", true),
        (IDENT_UPPER_SCOPED, "ident_upper_scoped", true),
        (IMPORT, "import", true),
        (INDEX, "index", true),
        (INTERPOLATION, "interpolation", true),
        (ITEM, "item", true),
        (KEY_PRIMARY, "key_primary", true),
        (LIT_BOOL, "lit_bool", true),
        (LIT_MAP, "lit_map", true),
        (LIT_NUM, "lit_num", true),
        (LIT_NUM_BRANCH, "lit_num_branch", true),
        (LIT_NUM_BRANCH_0, "lit_num_branch_0", true),
        (LIT_NUM_BRANCH_1, "lit_num_branch_1", true),
        (LIT_NUM_BRANCH_2, "lit_num_branch_2", true),
        (LIT_NUM_BRANCH_3, "lit_num_branch_3", true),
        (LIT_NUM_BRANCH_4, "lit_num_branch_4", true),
        (LIT_NUM_BRANCH_5, "lit_num_branch_5", true),
        (LIT_NUM_BRANCH_6, "lit_num_branch_6", true),
        (LIT_NUM_BRANCH_7, "lit_num_branch_7", true),
        (LIT_NUM_BRANCH_8, "lit_num_branch_8", true),
        (LIT_NUM_BIN, "lit_num_bin", true),
        (LIT_NUM_DEC, "lit_num_dec", true),
        (LIT_NUM_FLOAT, "lit_num_float", true),
        (LIT_NUM_HEX, "lit_num_hex", true),
        (LIT_NUM_OCT, "lit_num_oct", true),
        (LIT_STRING, "lit_string", true),
        (LIT_VEC, "lit_vec", true),
        (MISC_PAT0, "misc_pat0", true),
        (MODULE_ALIAS, "module_alias", true),
        (MODULE_PATH, "module_path", true),
        (NAME, "name", true),
        (NAME_ARG, "name_arg", true),
        (NAME_CONS, "name_cons", true),
        (NAME_FIELD, "name_field", true),
        (NAME_FUNC, "name_func", true),
        (NAME_INDEX, "name_index", true),
        (NAME_REL, "name_rel", true),
        (NAME_TRANS, "name_trans", true),
        (NAME_TYPE, "name_type", true),
        (NAME_VAR_TERM, "name_var_term", true),
        (NAME_VAR_TYPE, "name_var_type", true),
        (PAT, "pat", true),
        (PAT_CONS, "pat_cons", true),
        (PAT_CONS_POS, "pat_cons_pos", true),
        (PAT_CONS_REC, "pat_cons_rec", true),
        (PAT_LIT, "pat_lit", true),
        (PAT_TERM_DECL_VAR, "pat_term_decl_var", true),
        (PAT_TUPLE, "pat_tuple", true),
        (PAT_TYPE, "pat_type", true),
        (PAT_WILD, "pat_wild", true),
        (REL, "rel", true),
        (REL_ARGS, "rel_args", true),
        (REL_ELEM, "rel_elem", true),
        (REL_ROLE, "rel_role", true),
        (REL_SEMANTICS, "rel_semantics", true),
        (RHS, "rhs", true),
        (RHS_ATOM_NEG, "rhs_atom_neg", true),
        (RHS_FLAT_MAP, "rhs_flat_map", true),
        (RHS_GROUPING, "rhs_grouping", true),
        (RHS_INSPECT, "rhs_inspect", true),
        (RULE, "rule", true),
        (RULE_END, "rule_end", true),
        (STATEMENT, "statement", true),
        (STATEMENT_ASSIGN, "statement_assign", true),
        (STATEMENT_BLOCK, "statement_block", true),
        (STATEMENT_EMPTY, "statement_empty", true),
        (STATEMENT_FOR, "statement_for", true),
        (STATEMENT_IF, "statement_if", true),
        (STATEMENT_INSERT, "statement_insert", true),
        (STATEMENT_MATCH, "statement_match", true),
        (STRING_QUOTED, "string_quoted", true),
        (STRING_QUOTED_BRANCH_0, "string_quoted_branch_0", true),
        (STRING_QUOTED_BRANCH_1, "string_quoted_branch_1", true),
        (STRING_QUOTED_ESCAPED, "string_quoted_escaped", true),
        (STRING_QUOTED_ESCAPED_BRANCH_0, "string_quoted_escaped_branch_0", true),
        (STRING_QUOTED_ESCAPED_BRANCH_1, "string_quoted_escaped_branch_1", true),
        (STRING_RAW, "string_raw", true),
        (STRING_RAW_INTERPOLATED, "string_raw_interpolated", true),
        (STRING_RAW_INTERPOLATED_BRANCH_0, "string_raw_interpolated_branch_0", true),
        (STRING_RAW_INTERPOLATED_BRANCH_1, "string_raw_interpolated_branch_1", true),
        (TRANSFORMER, "transformer", true),
        (TYPE, "type", true),
        (TYPE_ATOM, "type_atom", true),
        (TYPE_BIGINT, "type_bigint", true),
        (TYPE_BIT, "type_bit", true),
        (TYPE_BOOL, "type_bool", true),
        (TYPE_DOUBLE, "type_double", true),
        (TYPE_FLOAT, "type_float", true),
        (TYPE_FUN, "type_fun", true),
        (TYPE_FUN_BRANCH_0, "type_fun_branch_0", true),
        (TYPE_FUN_BRANCH_1, "type_fun_branch_1", true),
        (TYPE_SIGNED, "type_signed", true),
        (TYPE_STRING, "type_string", true),
        (TYPE_TRANS, "type_trans", true),
        (TYPE_TRANS_FUN, "type_trans_fun", true),
        (TYPE_TRANS_REL, "type_trans_rel", true),
        (TYPE_TUPLE, "type_tuple", true),
        (TYPE_UNION, "type_union", true),
        (TYPE_USER, "type_user", true),
        (TYPE_VAR, "type_var", true),
        (TYPEDEF, "typedef", true),
        (TYPEDEF_EXTERN, "typedef_extern", true),
        (TYPEDEF_NORMAL, "typedef_normal", true),
        (WORD, "word", true),
    ],
}
